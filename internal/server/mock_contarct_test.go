// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	storage "http-avito-test/internal/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	zap "go.uber.org/zap"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockStorager) Deposit(arg0 context.Context, arg1 int64, arg2 decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockStoragerMockRecorder) Deposit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockStorager)(nil).Deposit), arg0, arg1, arg2)
}

// MonthlyReport mocks base method.
func (m *MockStorager) MonthlyReport(ctx context.Context, year, month int64) ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthlyReport", ctx, year, month)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonthlyReport indicates an expected call of MonthlyReport.
func (mr *MockStoragerMockRecorder) MonthlyReport(ctx, year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthlyReport", reflect.TypeOf((*MockStorager)(nil).MonthlyReport), ctx, year, month)
}

// ReadUserByID mocks base method.
func (m *MockStorager) ReadUserByID(arg0 context.Context, arg1 int64) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByID", arg0, arg1)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByID indicates an expected call of ReadUserByID.
func (mr *MockStoragerMockRecorder) ReadUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByID", reflect.TypeOf((*MockStorager)(nil).ReadUserByID), arg0, arg1)
}

// ReadUserHistoryList mocks base method.
func (m *MockStorager) ReadUserHistoryList(ctx context.Context, user_id int64, order storage.OrdBy, limit, offset int64) ([]storage.ReadUserHistoryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserHistoryList", ctx, user_id, order, limit, offset)
	ret0, _ := ret[0].([]storage.ReadUserHistoryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserHistoryList indicates an expected call of ReadUserHistoryList.
func (mr *MockStoragerMockRecorder) ReadUserHistoryList(ctx, user_id, order, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserHistoryList", reflect.TypeOf((*MockStorager)(nil).ReadUserHistoryList), ctx, user_id, order, limit, offset)
}

// Reservation mocks base method.
func (m *MockStorager) Reservation(ctx context.Context, UserId, ServiceId, OrderId int64, Price decimal.Decimal, description *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reservation", ctx, UserId, ServiceId, OrderId, Price, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reservation indicates an expected call of Reservation.
func (mr *MockStoragerMockRecorder) Reservation(ctx, UserId, ServiceId, OrderId, Price, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reservation", reflect.TypeOf((*MockStorager)(nil).Reservation), ctx, UserId, ServiceId, OrderId, Price, description)
}

// Revenue mocks base method.
func (m *MockStorager) Revenue(ctx context.Context, UserId, ServiceId, OrderId int64, Sum decimal.Decimal, description *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revenue", ctx, UserId, ServiceId, OrderId, Sum, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revenue indicates an expected call of Revenue.
func (mr *MockStoragerMockRecorder) Revenue(ctx, UserId, ServiceId, OrderId, Sum, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revenue", reflect.TypeOf((*MockStorager)(nil).Revenue), ctx, UserId, ServiceId, OrderId, Sum, description)
}

// Transfer mocks base method.
func (m *MockStorager) Transfer(ctx context.Context, user_id1, user_id2 int64, amount decimal.Decimal, description *string, options ...storage.TxOption) (int64, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, user_id1, user_id2, amount, description}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transfer", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Transfer indicates an expected call of Transfer.
func (mr *MockStoragerMockRecorder) Transfer(ctx, user_id1, user_id2, amount, description interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, user_id1, user_id2, amount, description}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockStorager)(nil).Transfer), varargs...)
}

// Unreservation mocks base method.
func (m *MockStorager) Unreservation(ctx context.Context, UserId, ServiceId, OrderId int64, description *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unreservation", ctx, UserId, ServiceId, OrderId, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unreservation indicates an expected call of Unreservation.
func (mr *MockStoragerMockRecorder) Unreservation(ctx, UserId, ServiceId, OrderId, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unreservation", reflect.TypeOf((*MockStorager)(nil).Unreservation), ctx, UserId, ServiceId, OrderId, description)
}

// Withdrawal mocks base method.
func (m *MockStorager) Withdrawal(arg0 context.Context, arg1 int64, arg2 decimal.Decimal, arg3 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawal", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockStoragerMockRecorder) Withdrawal(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockStorager)(nil).Withdrawal), arg0, arg1, arg2, arg3)
}

// MockExchanger is a mock of Exchanger interface.
type MockExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockExchangerMockRecorder
}

// MockExchangerMockRecorder is the mock recorder for MockExchanger.
type MockExchangerMockRecorder struct {
	mock *MockExchanger
}

// NewMockExchanger creates a new mock instance.
func NewMockExchanger(ctrl *gomock.Controller) *MockExchanger {
	mock := &MockExchanger{ctrl: ctrl}
	mock.recorder = &MockExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanger) EXPECT() *MockExchangerMockRecorder {
	return m.recorder
}

// ExchangeRates mocks base method.
func (m *MockExchanger) ExchangeRates(logger *zap.Logger, value decimal.Decimal, currency string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeRates", logger, value, currency)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeRates indicates an expected call of ExchangeRates.
func (mr *MockExchangerMockRecorder) ExchangeRates(logger, value, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeRates", reflect.TypeOf((*MockExchanger)(nil).ExchangeRates), logger, value, currency)
}
