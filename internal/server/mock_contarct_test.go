// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package server is a generated GoMock package.
package server

import (
	storage "http-avito-test/internal/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// DepositOrWithdrawal mocks base method.
func (m *MockStorager) DepositOrWithdrawal(arg0 int64, arg1 decimal.Decimal, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositOrWithdrawal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositOrWithdrawal indicates an expected call of DepositOrWithdrawal.
func (mr *MockStoragerMockRecorder) DepositOrWithdrawal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositOrWithdrawal", reflect.TypeOf((*MockStorager)(nil).DepositOrWithdrawal), arg0, arg1, arg2)
}

// ReadClient mocks base method.
func (m *MockStorager) ReadClient(arg0 int64) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadClient", arg0)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadClient indicates an expected call of ReadClient.
func (mr *MockStoragerMockRecorder) ReadClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClient", reflect.TypeOf((*MockStorager)(nil).ReadClient), arg0)
}

// ReadUserHistoryList mocks base method.
func (m *MockStorager) ReadUserHistoryList(user_id int64, sort string) ([]storage.Transf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserHistoryList", user_id, sort)
	ret0, _ := ret[0].([]storage.Transf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserHistoryList indicates an expected call of ReadUserHistoryList.
func (mr *MockStoragerMockRecorder) ReadUserHistoryList(user_id, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserHistoryList", reflect.TypeOf((*MockStorager)(nil).ReadUserHistoryList), user_id, sort)
}

// Transfer mocks base method.
func (m *MockStorager) Transfer(user_id1, user_id2 int64, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", user_id1, user_id2, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockStoragerMockRecorder) Transfer(user_id1, user_id2, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockStorager)(nil).Transfer), user_id1, user_id2, amount)
}
